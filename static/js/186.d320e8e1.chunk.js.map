{"version":3,"file":"static/js/186.d320e8e1.chunk.js","mappings":"+NAuCA,UAnCgB,WACd,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAMC,EAAN,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACOC,GAAMC,EAAAA,EAAAA,MAAND,GAEDE,EAAY,mCAAG,6FACnBH,GAAa,GADM,mBAGOI,EAAAA,EAAAA,IAAe,CAAEC,SAAUC,EAAAA,GAAAA,OAAkBL,GAAIA,IAHxD,gBAGVM,EAHU,EAGVA,QAEPT,EAAWS,GACXP,GAAa,GANI,kDAQjBQ,QAAO,OAAC,EAAD,yBAAC,KAAOC,SARE,0DAAH,qDAiBlB,OALAC,EAAAA,EAAAA,YAAU,WACRP,GAED,GAAC,CAACF,KAGD,8BACqB,IAAnBJ,EAAQc,QAAgB,wBACvBd,EAAQe,KAAI,gBAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,QAAV,OACX,2BACE,wBAAKD,KACL,uBAAIC,MAHK,OAMFf,IAAa,0DAG7B,C,sKCpCDgB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHV,EAAa,CACxBW,MAAO,qBACPC,OAAQ,eACRC,OAAQ,WACRC,OAAQ,YAGGC,EAAS,mCAAG,kJAAgC,CAAC,EAAjC,IAAQC,MAAAA,OAAR,MAAc,GAAd,MAAiBC,SAAAA,OAAjB,MAA0B,GAA1B,oBAEER,EAAAA,EAAAA,IAAU,UAAGQ,EAAH,KAAiB,IAAIC,gBAAgB,CAClEF,MAAM,GAAD,OAAKA,GACVG,QAAST,KAJQ,cAEfU,EAFe,yBAMdA,EAASC,MANK,gCAQrBC,IAAAA,OAAAA,QAAA,kCAAwB,KAAOnB,SARV,yDAAH,qDAYTL,EAAc,mCAAG,kJAA6B,CAAC,EAA9B,IAAQC,SAAAA,OAAR,MAAiB,GAAjB,MAAoBJ,GAAAA,OAApB,MAAuB,GAAvB,oBAEHc,EAAAA,EAAAA,IAAU,gBAASd,GAAT,OAAcI,EAAd,KAA4B,IAAImB,gBAAgB,CAC7EC,QAAST,KAHa,cAEpBU,EAFoB,yBAKnBA,EAASC,MALU,gCAO1BC,IAAAA,OAAAA,QAAA,kCAAwB,KAAOnB,SAPL,yDAAH,oD","sources":["components/Reviews/Reviews.jsx","utils/ApiService/ApiService.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetail, END_POINTS } from 'utils/ApiService/ApiService';\n\nconst Reviews = () => {\n  const[reviews,setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const {id} = useParams();\n\n  const fetchReviews = async() =>{\n    setIsLoading(true);\n    try {\n      const {results} = await getMovieDetail({ searchBy: END_POINTS.review,id: id });\n      // console.log('Reviews',results);\n      setReviews(results);\n      setIsLoading(false);\n    } catch (error) {\n      console(error?.message);\n    }\n  };\n\n  useEffect(() => {\n    fetchReviews();\n    // eslint-disable-next-line\n  },[id])\n  \n  return (\n    <>\n     {reviews.length !== 0 ? (<ul>\n      {reviews.map(({author, content})=>(\n        <li>\n          <h4>{author}</h4>\n          <p>{content}</p>\n        </li>\n      ))}\n      </ul>) : (!isLoading && <div>There are no reviews found!</div>)}\n      </>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\nimport Notiflix from 'notiflix';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'af1ce8cf17bdf1608b8338f3be4c63e7';\n\nexport const END_POINTS = {\n  trend: 'trending/movie/day',\n  search: 'search/movie',\n  credit: '/credits',\n  review: '/reviews',\n}\n\nexport const getMovies = async ({query='',endpoint=''} = {}) => {\n  try {\n    const response = await axios.get(`${endpoint}?` + new URLSearchParams({\n        query: `${query}`,\n        api_key: API_KEY,\n    }));\n    return response.data;\n  } catch (error) {\n    Notiflix.Notify.failure(error?.message);\n  }\n};\n\nexport const getMovieDetail = async ({searchBy='',id=''} = {}) => {\n  try {\n    const response = await axios.get(`movie/${id}${searchBy}?` + new URLSearchParams({\n        api_key: API_KEY,\n    }));\n    return response.data;\n  } catch (error) {\n    Notiflix.Notify.failure(error?.message);\n  }\n};\n"],"names":["useState","reviews","setReviews","isLoading","setIsLoading","id","useParams","fetchReviews","getMovieDetail","searchBy","END_POINTS","results","console","message","useEffect","length","map","author","content","axios","API_KEY","trend","search","credit","review","getMovies","query","endpoint","URLSearchParams","api_key","response","data","Notiflix"],"sourceRoot":""}